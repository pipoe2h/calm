{"status":{},"contains_secrets":false,"product_version":"2.9.8","spec":{"description":"","resources":{"client_attrs":{"28835c80_deployment":{"y":313,"x":492}},"service_definition_list":[{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"CentOS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"3e04c3e8_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"51a976a9_runbook","main_task_local_reference":{"kind":"app_task","name":"3e04c3e8_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"CentOS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"fba19a2b_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"826677a6_runbook","main_task_local_reference":{"kind":"app_task","name":"fba19a2b_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"CentOS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"de18e761_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"0351cc89_runbook","main_task_local_reference":{"kind":"app_task","name":"de18e761_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"CentOS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"a32783f2_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"9768ff9f_runbook","main_task_local_reference":{"kind":"app_task","name":"a32783f2_dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"CentOS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"982d4329_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"10fc0cf6_runbook","main_task_local_reference":{"kind":"app_task","name":"982d4329_dag"},"variable_list":[]},"name":"action_restart"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"0_nsx_assign_tags"}],"name":"caefa5ee_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"CentOS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"0_nsx_assign_tags","attrs":{"script":"# api call function\n# ================================================================\ndef http_request(api_endpoint, payload='', method='POST'):\n  username = 'admin'\n  username_secret = '@@{nsx_password}@@'\n  nsx_address = '@@{NSX_IP}@@'\n  nsx_port = '443'\n\n  url = \"https:\/\/{}:{}{}\".format(\n      nsx_address,\n      nsx_port,\n      api_endpoint\n  )\n    \n  headers = {\n      'Content-Type': 'application\/json',\n      'Accept': 'application\/json'\n  }\n  \n  if len(payload) > 0:\n      payload = json.dumps(payload)\n      \n  \n  resp = urlreq(\n      url,\n      verb=method,\n      auth='BASIC',\n      user=username,\n      passwd=username_secret,\n      params=payload,\n      headers=headers,\n      verify=False\n  )\n\n  if resp.ok:\n      return resp\n  else:\n      print(json.loads(resp.content))\n      print('Error in API call')\n      exit(1)\n\n# get list of entitled networks\n# ================================================================\ndef assign_nsx_tags(tenant_uuid, tags):\n  api_url = '\/policy\/api\/v1\/infra\/realized-state\/enforcement-points\/default\/virtual-machines?action=update_tags'\n  \n  payload = {\n    \"virtual_machine_id\": \"@@{id}@@\",\n    \"tags\": [\n      {\n        \"scope\": \"calm\",\n        \"tag\": \"{}\".format(tenant_uuid)\n      }\n    ]\n  }  \n  \n  for tag in tags:\n    payload['tags'].append({\n      \"scope\": \"{}\".format(tenant_uuid),\n      \"tag\": \"{}\".format(tag)\n    })\n    \n  result = http_request(api_url, payload=payload, method='POST')\n\n  if result.ok:\n    print('Tags applied')\n  \n# get tenant uuid\n# ================================================================\ndef get_tenant_uuid(project_name):\n  tenant_uuid = project_name.split('-')[-1]\n  return tenant_uuid\n\ntenant_uuid = get_tenant_uuid('@@{calm_project_name}@@')\ntags = '@@{nsx_nsgroups}@@'.split(',')\n\nassign_nsx_tags(tenant_uuid,tags) ","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"49cb9bee_runbook","main_task_local_reference":{"kind":"app_task","name":"caefa5ee_dag"},"variable_list":[]},"name":"nsx_update_ns_group"}],"depends_on_list":[],"name":"CentOS","port_list":[],"tier":"","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"TENANT","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"NETWORK","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}],"description":""}],"substrate_definition_list":[{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"CentOSVMW"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"get_network_id"},{"kind":"app_task","name":"get_tenant_id"}],"name":"5f8ec409_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"get_network_id"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"get_tenant_id"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"CentOSVMW"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"get_network_id","attrs":{"exit_status":[],"script":"# api call function\n# ================================================================\ndef http_request(api_endpoint, payload='', method='POST'):\n  username = '@@{cred_nsx_mgr.username}@@'\n  username_secret = '@@{cred_nsx_mgr.secret}@@'\n  nsx_address = '@@{NSX_IP}@@'\n  nsx_port = '443'\n\n  url = \"https:\/\/{}:{}{}\".format(\n      nsx_address,\n      nsx_port,\n      api_endpoint\n  )\n    \n  headers = {\n      'Content-Type': 'application\/json',\n      'Accept': 'application\/json'\n  }\n  \n  if len(payload) > 0:\n      payload = json.dumps(payload)\n      \n  \n  resp = urlreq(\n      url,\n      verb=method,\n      auth='BASIC',\n      user=username,\n      passwd=username_secret,\n      params=payload,\n      headers=headers,\n      verify=False\n  )\n\n  if resp.ok:\n      return json.loads(resp.content)\n  else:\n      print(json.loads(resp.content))\n      print('Error in API call')\n      exit(1)\n\n# get list of logical switches\n# ================================================================\ndef get_logical_switches():\n  api_url = '\/api\/v1\/logical-switches'\n  payload = {}\n  \n  result = http_request(api_url, payload=payload, method='GET')\n  \n  return result['results']\n  \n# get logical switch uuid\n# ================================================================\ndef get_ls_uuid(segment_name):\n  ls_list = get_logical_switches()\n  \n  for switch in ls_list:\n      if switch['display_name'] == segment_name:\n        return switch['id']\n        break\n# ================================================================\ndef get_tenant_uuid(project_name):\n  tenant_uuid = project_name.split('-')[-1]\n  return tenant_uuid\n\ntenant_uuid = get_tenant_uuid('@@{calm_project_name}@@')\n\nls_uuid = get_ls_uuid('{}-@@{network_name}@@'.format(tenant_uuid))\n\nprint \"NETWORK={}\".format(ls_uuid)","eval_variables":["NETWORK"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"CentOSVMW"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"get_tenant_id","attrs":{"exit_status":[],"script":"# get tenant uuid\n# ================================================================\ndef get_tenant_uuid(project_name):\n  tenant_uuid = project_name.split('-')[-1]\n  return tenant_uuid\n\ntenant_uuid = get_tenant_uuid('@@{calm_project_name}@@')\nprint(\"TENANT={}\".format(tenant_uuid))","eval_variables":["TENANT"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]}],"description":"","name":"dfce6a2c_runbook","main_task_local_reference":{"kind":"app_task","name":"5f8ec409_dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"CentOSVMW"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"31db96f3_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"847e9e7c_runbook","main_task_local_reference":{"kind":"app_task","name":"31db96f3_dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"VMWARE_VM","name":"CentOSVMW","readiness_probe":{"connection_type":"SSH","retries":"5","connection_protocol":"","connection_port":22,"address":"@@{platform.ipAddressList[0]}@@","delay_secs":"60","disable_readiness_probe":true},"editables":{"create_spec":{"name":true,"resources":{"template_nic_list":{},"nic_list":{"0":{}},"template_controller_list":{},"num_sockets":true,"controller_list":{},"memory_size_mib":true,"template_disk_list":{}}}},"os_type":"Linux","create_spec":{"name":"vm-@@{calm_array_index}@@-@@{calm_time}@@","type":"PROVISION_VMWARE_VM","drs_mode":false,"cluster":"","host":"00000000-0000-0000-0000-0cc47ac451f2","resources":{"nic_list":[{"nic_type":"vmxnet3","type":"","net_name":"@@{NETWORK}@@"}],"template_nic_list":[{"nic_type":"e1000","is_deleted":true,"net_name":"NETWORK","key":4000,"type":""}],"template_controller_list":[],"num_vcpus_per_socket":2,"num_sockets":1,"controller_list":[],"memory_size_mib":6144,"power_state":"poweron","guest_customization":{"customization_name":"","cloud_init":"#cloud-config\nhostname: @@{name}@@\nusers:\n  - name: @@{cred_os.username}@@\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']\nchpasswd:\n  list: |\n    @@{cred_os.username}@@:@@{cred_os.secret}@@\n  expire: False\nssh_pwauth: True","linux_data":null,"customization_type":"GUEST_OS_LINUX","type":"","windows_data":null},"template_disk_list":[{"disk_size_mb":-1,"is_deleted":false,"disk_mode":"persistent","device_slot":0,"adapter_type":"IDE","iso_path":"","location":"","key":3000,"controller_key":200,"disk_type":"cdrom","type":""},{"disk_size_mb":10240,"is_deleted":false,"disk_mode":"persistent","device_slot":0,"adapter_type":"SCSI","iso_path":"","location":"ds:\/\/\/vmfs\/volumes\/4e652813-702600f3\/","key":2000,"controller_key":1000,"disk_type":"disk","type":""}],"type":"","account_uuid":"79218e3e-b382-f230-52ea-d9f2de4c8922","disk_list":[]},"template":"5022f196-9b7c-8cbf-a9f5-33123ac6d54f","datastore":"ds:\/\/\/vmfs\/volumes\/4e652813-702600f3\/","storage_pod":"","clone_is_template":false},"variable_list":[]}],"credential_definition_list":[{"username":"admin","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"cred_nsx_mgr"},{"username":"centos","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"cred_os","editables":{"username":true,"secret":true}}],"package_definition_list":[{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"CentOS"}],"name":"Package1","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package1"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[{"kind":"app_task","name":"0_nsx_update_ns_group"}],"name":"3e6ae986_dag","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"CentOS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"0_nsx_update_ns_group","state":"ACTIVE","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"49cb9bee_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"107e4693_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"3e6ae986_dag"},"message_list":[],"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package1"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"e320ab55_dag","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"39c2f6c7_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"e320ab55_dag"},"message_list":[],"variable_list":[]}},"variable_list":[]}],"app_profile_list":[{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"name":"28835c80_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Package1"}],"substrate_local_reference":{"kind":"app_substrate","name":"CentOSVMW"},"variable_list":[],"description":""}],"description":"","action_list":[{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"nsx_update_ns_group"}],"name":"ef32c416_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"CentOS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"nsx_update_ns_group","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"49cb9bee_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"5f630b14_runbook","main_task_local_reference":{"kind":"app_task","name":"ef32c416_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"LIST","type":"HTTP_LOCAL","name":"groups_list","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"HTTP","attrs":{"expected_response_params":[{"status":"SUCCESS","code":200,"type":""}],"request_body":"{\n    \"primary\": {\n        \"resource_type\": \"Group\",\n        \"filters\": [\n            {\n                \"field_names\": \"tags.tag\",\n                \"value\": \"(9H6LBV0ITFIOBUOJ)\"\n            }\n        ]\n    }\n  }","headers":[],"url":"https:\/\/10.38.177.47\/policy\/api\/v1\/search\/aggregate?sort_by=display_name&sort_ascending=true","response_paths":{"groups_list":"$.results[*].primary.id"},"retry_interval":1,"method":"POST","retry_count":1,"authentication":{"username":"admin","password":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"type":"basic"},"tls_verify":false,"content_type":"application\/json","connection_timeout":120,"type":"HTTP","proxy_type":""}}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"nsx_password","value":"Nutanix2020!","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"NSX_IP","value":"10.38.177.47","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"tenant_uuid","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"LIST","type":"EXEC_LOCAL","name":"nsx_nsgroups","value":"","label":"Security groups","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"# api call function\n# ================================================================\ndef http_request(api_endpoint, payload='', method='POST'):\n  username = 'admin'\n  username_secret = 'Nutanix2020!'\n  nsx_address = '10.38.177.47'\n  nsx_port = '443'\n\n  url = \"https:\/\/{}:{}{}\".format(\n      nsx_address,\n      nsx_port,\n      api_endpoint\n  )\n    \n  headers = {\n      'Content-Type': 'application\/json',\n      'Accept': 'application\/json'\n  }\n  \n  if len(payload) > 0:\n      payload = json.dumps(payload)      \n  \n  resp = urlreq(\n      url,\n      verb=method,\n      auth='BASIC',\n      user=username,\n      passwd=username_secret,\n      params=payload,\n      headers=headers,\n      verify=False\n  )\n\n  if resp.ok:\n      return json.loads(resp.content)\n  else:\n      print(json.loads(resp.content))\n      print('Error in API call')\n      exit(1)\n\n# get list of entitled networks\n# ================================================================\ndef get_nsx_groups(tenant_uuid):\n  api_url = '\/policy\/api\/v1\/search\/aggregate?sort_by=display_name&sort_ascending=true'\n  payload = {\n    \"primary\": {\n        \"resource_type\": \"Group\",\n        \"filters\": [\n            {\n                \"field_names\": \"tags.tag\",\n                \"value\": \"({})\".format(tenant_uuid)\n            }\n        ]\n    }\n  }\n\n  result = http_request(api_url, payload=payload, method='POST')\n\n  group_list = ['']\n  for group in result['results']:\n    group_list.append(group['primary']['id'].split('-')[-1])\n  \n  return group_list\n  \n# get tenant uuid\n# ================================================================\ndef get_tenant_uuid(project_name):\n  tenant_uuid = project_name.split('-')[-1]\n  return tenant_uuid\n\ntenant_uuid = \"@@{tenant_uuid}@@\"\ngroup_list = get_nsx_groups(tenant_uuid) \n\nprint \",\".join(map(str,group_list)) ","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}}]},"name":"Update NS Groups"}],"name":"Default","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"LIST","type":"EXEC_LOCAL","name":"nsx_nsgroups","value":"","label":"Security groups","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"# api call function\n# ================================================================\ndef http_request(api_endpoint, payload='', method='POST'):\n  username = 'admin'\n  username_secret = '@@{nsx_password}@@'\n  nsx_address = '@@{NSX_IP}@@'\n  nsx_port = '443'\n\n  url = \"https:\/\/{}:{}{}\".format(\n      nsx_address,\n      nsx_port,\n      api_endpoint\n  )\n    \n  headers = {\n      'Content-Type': 'application\/json',\n      'Accept': 'application\/json'\n  }\n  \n  if len(payload) > 0:\n      payload = json.dumps(payload)      \n  \n  resp = urlreq(\n      url,\n      verb=method,\n      auth='BASIC',\n      user=username,\n      passwd=username_secret,\n      params=payload,\n      headers=headers,\n      verify=False\n  )\n\n  if resp.ok:\n      return json.loads(resp.content)\n  else:\n      print(json.loads(resp.content))\n      print('Error in API call')\n      exit(1)\n\n# get list of entitled networks\n# ================================================================\ndef get_nsx_groups(tenant_uuid):\n  api_url = '\/policy\/api\/v1\/search\/aggregate?sort_by=display_name&sort_ascending=true'\n  payload = {\n    \"primary\": {\n        \"resource_type\": \"Group\",\n        \"filters\": [\n            {\n                \"field_names\": \"tags.tag\",\n                \"value\": \"({})\".format(tenant_uuid)\n            }\n        ]\n    }\n  }\n\n  result = http_request(api_url, payload=payload, method='POST')\n\n  group_list = ['']\n  for group in result['results']:\n    group_list.append(group['primary']['id'].split('-')[-1])\n  \n  return group_list\n  \n# get tenant uuid\n# ================================================================\ndef get_tenant_uuid(project_name):\n  tenant_uuid = project_name.split('-')[-1]\n  return tenant_uuid\n\ntenant_uuid = get_tenant_uuid('@@{calm_project_name}@@')\ngroup_list = get_nsx_groups(tenant_uuid) \n\nprint \",\".join(map(str,group_list)) ","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"nsx_password","value":"Nutanix2020!","label":"","attrs":{"type":"LOCAL"},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"network_name","value":"","label":"Select network","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"# api call function\n# ================================================================\ndef http_request(api_endpoint, payload='', method='POST'):\n  username = 'admin'\n  username_secret = '@@{nsx_password}@@'\n  nsx_address = '@@{NSX_IP}@@'\n  nsx_port = '443'\n\n  url = \"https:\/\/{}:{}{}\".format(\n      nsx_address,\n      nsx_port,\n      api_endpoint\n  )\n    \n  headers = {\n      'Content-Type': 'application\/json',\n      'Accept': 'application\/json'\n  }\n  \n  if len(payload) > 0:\n      payload = json.dumps(payload)\n      \n  \n  resp = urlreq(\n      url,\n      verb=method,\n      auth='BASIC',\n      user=username,\n      passwd=username_secret,\n      params=payload,\n      headers=headers,\n      verify=False\n  )\n\n  if resp.ok:\n      return json.loads(resp.content)\n  else:\n      print(json.loads(resp.content))\n      print('Error in API call')\n      exit(1)\n\n# get list of entitled networks\n# ================================================================\ndef get_nsx_segments(tenant_uuid):\n  api_url = '\/policy\/api\/v1\/infra\/tier-1s\/{}-tier-1-gw\/segments'.format(tenant_uuid)\n  payload = {}\n  \n  result = http_request(api_url, payload=payload, method='GET')\n\n  network_list = ['']\n  for network in result['results']:\n    if network['id'].startswith(tenant_uuid):\n      network_list.append(network['id'].split('-')[-1])\n  \n  return network_list\n  \n# get tenant uuid\n# ================================================================\ndef get_tenant_uuid(project_name):\n  tenant_uuid = project_name.split('-')[-1]\n  return tenant_uuid\n\ntenant_uuid = get_tenant_uuid('@@{calm_project_name}@@')\nnetwork_list = get_nsx_segments(tenant_uuid) \n\nprint \",\".join(map(str,network_list))","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"NSX_IP","value":"10.38.177.47","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}}]}],"published_service_definition_list":[],"default_credential_local_reference":{"kind":"app_credential","name":"cred_os"},"type":"USER"},"name":"cloudAdmin-centos"},"api_version":"3.0","metadata":{"last_update_time":"1586353473726546","kind":"blueprint","spec_version":26,"creation_time":"1584791825486463","name":"cloudAdmin-centos"}}